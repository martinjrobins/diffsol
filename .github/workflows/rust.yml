name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
      
env:
  CARGO_TERM_COLOR: always
  CARGO_HOME: ${{ github.workspace }}/.cargo
  RUSTFLAGS: -D warnings -A unused-imports
  RUSTDOCFLAGS: -D warnings
  RUST_BACKTRACE: full

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: rustup update stable --no-self-update
      - run: rustc -Vv
      - run: cargo fmt --all -- --check

  unit-tests:
    name: ${{ matrix.basename }} - ${{ matrix.os }} - ${{ matrix.toolchain }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
        matrix:
          coverage:
            - false
          experimental:
            - false
          clippy:
            - false
          rustdoc:
            - false
          tests:
            - true
          toolchain:
            - stable
          basename:
            - Tests
          os:
            - ubuntu-latest
            - macos-latest
            - windows-latest
          include:
            - toolchain: stable
              os: ubuntu-latest
              tests: false
              clippy: false
              experimental: true
              basename: Coverage
              coverage: true
            - toolchain: beta
              os: ubuntu-latest
              experimental: true
              tests: true
              basename: Tests
              coverage: false
            - toolchain: nightly
              os: ubuntu-latest
              tests: true
              experimental: true
              basename: Tests
              coverage: false
            - toolchain: stable
              os: ubuntu-latest
              tests: false
              clippy: true
              experimental: true
              basename: Clippy
              coverage: false
            - toolchain: nightly
              os: ubuntu-latest
              tests: false
              rustdoc: true
              experimental: true
              basename: Rustdoc
              coverage: false

    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: |
          ${{ env.CARGO_HOME }}
          target
        key: diffsol-${{ runner.os }}-${{ matrix.toolchain}}-coverage${{ matrix.coverage }}-llvm17
    - name: Set up Rust
      run: rustup default ${{ matrix.toolchain }} && rustup update ${{ matrix.toolchain }} --no-self-update && rustup component add clippy
    - name: Rust version
      run: rustc -Vv
    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v2
      if : matrix.os == 'ubuntu-latest' || matrix.os == 'macos-13' || matrix.os == 'macos-latest'
      with:
        version: "17.0"
    - name: Set features variable and install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "ADDITIONAL_FEATURES_FLAGS=--features diffsl-llvm17 --features diffsl-cranelift --features suitesparse" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install -y libsuitesparse-dev
    - name: Install tarpaulin
      if: matrix.coverage == true
      run: cargo install cargo-tarpaulin
    - name: Set features variable and install dependencies (macOS)
      if: matrix.os == 'macos-13' || matrix.os == 'macos-latest'
      run: |
        echo "ADDITIONAL_FEATURES_FLAGS=--features diffsl-llvm17 --features diffsl-cranelift" >> $GITHUB_ENV
    - name: Set features variable and install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "ADDITIONAL_FEATURES_FLAGS=--features diffsl-cranelift" >> $GITHUB_ENV
    - name: Run tests - default features
      if: matrix.tests == true
      run: cargo test --verbose
    - name: Run tests - all features
      if: matrix.tests == true
      run: cargo test --verbose ${{ env.ADDITIONAL_FEATURES_FLAGS || '' }}
    - name: Clippy - all features
      if: matrix.clippy == true
      run: cargo clippy --verbose ${{ env.ADDITIONAL_FEATURES_FLAGS || ''}}
    - name: Docs - all features
      if: matrix.rustdoc == true
      run: cargo rustdoc -p diffsol ${{ env.ADDITIONAL_FEATURES_FLAGS || ''}}
    - name: Generate coverage report
      if: matrix.coverage == true
      run: cargo tarpaulin --out Xml --packages diffsol ${{ env.ADDITIONAL_FEATURES_FLAGS || '' }}
    - name: Upload coverage
      uses: codecov/codecov-action@v5
      if: matrix.coverage == true
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: cobertura.xml

  book:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup mdBook
        uses: peaceiris/actions-mdbook@v2
        with:
          mdbook-version: 'latest'

      - run: mdbook build book

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v4
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./book/book